import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Scanner;

public class LSB {
    public static void main(String[] args) throws IOException {
        Scanner scan = new Scanner(System.in);
        System.out.println("*************** LSB image concealment code program ****************");
        System.out.println("********* Please select the function you want to use (enter number) *************");
        System.out.println();
        System.out.println("***************** 1.lsb encoded *******************");
        System.out.println("****************** 2.LSB decoded *******************");
        System.out.println();
        System.out.print("Please enter the function you want to choose:");
        String choice = scan.next();
        switch(choice){
            case "1":
                System.out.print("Please enter the path to the file that you need to encrypted:");
                String textPath = scan.next();
                System.out.print("Please enter the path to the PNG image auxiliary file:");
                String imagePath = scan.next();
                System.out.print("Finally, enter the save path of the generated PNG picture:");
                String  imageOutputPath= scan.next();
                LSBEncoder(textPath,imagePath,imageOutputPath);
                scan.close();
                break;
            case "2":
                System.out.print("Please enter the path to the PNG picture to be decoded:");
                String imageInputPath = scan.next();
                System.out.print("Please enter the decoding, save the file name");
                        String textFilePath = scan.next();
                LSBDecoder(imageInputPath,textFilePath);
                scan.close();
                break;
            default:
                System.out.print("Who told you to press the keyboard !!! Can you do it, hey!");
                scan.close();
                break;
        }
    }
    public static void LSBEncoder(String textPath, String imagePath,String imageOutputPath ) throws IOException {

        // read the PNG image
        BufferedImage image = ImageIO.read(new File(imagePath));
        int width = image.getWidth();
        int height = image.getHeight();
        int[][][] rgb = new int[width][height][3];
        // Store the pixels (R, G, B) of each point in the array
        for (int w = 0; w < width; w++) {
            for (int h = 0; h < height; h++) {
                int pixel = image.getRGB(w, h);// read a 24-bit data
                // Data three bytes represent R, B, g
                rgb[w][h][0] = (pixel & 0xff0000) >> 16;//R
                rgb[w][h][1] = (pixel & 0xff00) >> 8;//B
                rgb[w][h][2] = (pixel & 0xff);//G
            }
        }

        // Import the confidential file to be encrypted
        FileInputStream fis = new FileInputStream(textPath);
        int byteLen = fis.available();
        byte[] buf = new byte[byteLen];
        fis.read(buf);


        // I use two bytes (16 bits) to indicate the length of the data part, that is, the least significant bit of the byte of the first 16 pixel points of the first 16 pixel points is the default representation data byte by default. Array length
        // Stipulate that the length is 2 ^ 16-1
        int[] bufLen = new int[2];
        bufLen[0] = (byteLen & 0xff00 ) >> 8;
        bufLen[1] = (byteLen & 0xff);
        for (int i = 0; i < 2; i++) {
            for (int j = 7; j >= 0; j--) {
                int h =(i * 8 +(7 - j)) / width;
                int w = (i * 8 + (7-j)) % width;
                // Take the lowest bit of the byte of each pixel point
                if((bufLen[i] >>j & 1) == 1 ){
                    rgb[w][h][0] = rgb[w][h][0] | 1;
                } else {
                    rgb[w][h][0] = rgb[w][h][0] & 0xe;
                }
            }
        }

        // Put all the binary sequences of the data in accordance with the rules to the last bit of the first byte of each pixel point
        for (int i = 2; i < byteLen + 2; i++) {
            for (int j = 7; j >= 0; j--) {
                //high
                int h = (i * 8 + (7 - j)) / width ;
                //width
                int w = (i * 8 + (7 - j)) % width;
                if ((buf[i-2] >> j & 1) == 1) {
                    rgb[w][h][0] = rgb[w][h][0] | 1;// change 1
                } else {
                    rgb[w][h][0] =rgb[w][h][0] & 0xe;
                }
            }
        }
        // Construction of the type of PNG image generated by the encoding
        BufferedImage imageOutput = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        for (int w = 0; w < width; w++) {
            for (int h = 0; h < height; h++) {
                int[] color = new int[3];
                color[0] = rgb[w][h][0] << 16;
                color[1] = rgb[w][h][1] << 8;
                color[2] = rgb[w][h][2];
                int pixel = 0xff000000 | color[0] | color[1] | color[2];
                imageOutput.setRGB(w, h, pixel);
            }
        }
        ImageIO.write(imageOutput, "png", new File(imageOutputPath));
    }

    public static void LSBDecoder(String imageInputPath,String textFilePath) throws IOException {
        BufferedImage imageInput = ImageIO.read(new File(imageInputPath));
        int width = imageInput.getWidth();
        int height = imageInput.getHeight();
        int[] bufLen=  new int[2];
        // Store the pixels (R, G, B) of each point in the array
        for (int i = 0; i < 2; i++) {
            int[] bits = new int[8];
            for (int j = 7; j >= 0; j--) {
                int h =(i * 8 +(7 - j)) / width;
                int w = (i * 8 + (7-j)) % width;
                int pixel = imageInput.getRGB(w,h);
                int r = (pixel & 0xff0000) >> 16;
                bits[j] = (r & 1) << j;
            }
            bufLen[i] =  bits[7] | bits[6] | bits[5] | bits[4] | bits[3] | bits[2] | bits[1] | bits[0];
        }
        int byteLen =  ( (bufLen[0] << 7) |bufLen[1]);
//        System.out.println(byteLen);
        byte[] buf = new byte[byteLen];
        for (int i = 2; i < byteLen + 2; i++) {
            int[] bits = new int[8];
            for (int j = 7; j >= 0; j--) {
                int h = (i * 8 + (7 - j)) / width;
                int w = (i * 8 + (7 - j)) % width;
                int pixel = imageInput.getRGB(w, h);
                int r = (pixel & 0xff0000) >> 16;
                bits[j] = (r & 0x1) << j;
            }
            buf[i-2] = (byte)(bits[7] | bits[6] | bits[5] | bits[4] | bits[3] | bits[2] | bits[1] | bits[0]);
        }
//        System.out.println(new String(buf));
        FileOutputStream fos = new FileOutputStream(textFilePath);
        fos.write(buf);
        fos.close();
    }
}